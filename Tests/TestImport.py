import TinyNeuralNetwork as tnn
from Tests.DatasetGenerationFunction import random_dataset_of_bits, xor

input_bits = 4
testCount = 100
test_data = random_dataset_of_bits(testCount, input_bits, xor)

# load model (from xor training)
model = b'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'
neural_network2 = tnn.import_model(model)

# Test network
testResults = []
for i in range(testCount):
    output = neural_network2.get_output(test_data[i][0])
    testResults.append(round(output[0]) == test_data[i][1][0])

# % of success
successRate = sum(testResults) / testCount
print("Success rate: ", successRate * 100, "%")